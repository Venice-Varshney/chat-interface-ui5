/* eslint-disable camelcase */
'use strict';

const request = require('./request-utils');
const xsenv   = require('@sap/xsenv');
const log     = require('cf-nodejs-logging-support');

class DestinationUtils {

  constructor(sapCloudService) {
    this._sapCloudService = sapCloudService;
    this._subaccountLevelDestination = process.env.SUBACCOUNT_LEVEL_DESTINATION;
    this._backendDestinations = null;
    this._destinationLogs = [];
    if (process.env.BACKEND_DESTINATIONS){
      try {
        this._backendDestinations = JSON.parse(process.env.BACKEND_DESTINATIONS);
      } catch (err){
        throw new Error('Failed to parse backend destinations ' + err);
      }
    }
  }

  upsertDestinations(cb) {
    this._getDestinationToken()
      .then((accessToken) => {
        this._accessToken = accessToken;
      })
      .then(() => this._upsertAppHostDestination())
      .then(() => this._upsertXSUAADestination())
      .then(() => this._upsertIASDestination())
      .then(() => this._upsertBackendDestinations())
      .then(() => this._upsertBusinessServicesDestinations())
      .then(() => {
        log.logMessage('Destinations created succesfully');
        cb(null,this._destinationLogs);
      })
      .catch((err) => {
        let message = 'Failed to create/update destinations ' + err;
        cb(message);
      });
  }

  _upsertXSUAADestination(){
    return new Promise((resolve) => {
      log.logMessage('Creating xsuaa destination');
      let credentials = this._getCredentials('xsuaa');
      if (!credentials){
        log.logMessage('No XSUAA service instance bound');
        return resolve();
      }
      let body = {
        Type: 'HTTP',
        Name: this._sapCloudService.replace(/\./g,'') + '-xsuaa',
        Description: 'xsuaa destination',
        clientSecret: credentials.clientsecret,
        certificate: credentials.certificate,
        key: credentials.key,
        clientId: credentials.clientid,
        tokenServiceURL: credentials.url,
        uaadomain: credentials.uaadomain,
        xsappname: credentials.xsappname,
        URL: credentials.url,
        'sap.cloud.service': this._sapCloudService,
      };
      resolve(this._upsertDestinationConfigurations(body));
    });
  }

  _upsertIASDestination(){
    return new Promise((resolve) => {
      log.logMessage('Creating ias destination');
      let credentials = this._getCredentials(null,'identity');
      if (!credentials){
        log.logMessage('No IAS service instance bound');
        return resolve();
      }
      let body = {
        Type: 'HTTP',
        Name: this._sapCloudService.replace(/\./g,'') + '-ias',
        Description: 'ias destination',
        clientSecret: credentials.clientsecret,
        clientId: credentials.clientid,
        certificate: credentials.certificate,
        key: credentials.key,
        domain: credentials.domain || (credentials.domains && credentials.domains[0]),
        tokenServiceUrl: credentials.url,
        URL: credentials.url,
        'sap.cloud.service': this._sapCloudService,
      };
      resolve(this._upsertDestinationConfigurations(body));
    });
  }

  _upsertAppHostDestination(){
    return new Promise((resolve, reject) => {
      log.logMessage('Creating app-host destination');
      let credentials = this._getCredentials('html5-apps-repo-dt');
      if (!credentials){
        credentials = this._getCredentials('html5-apps-repo');
      }
      if (!credentials){
        return reject('No html5-apps-repo/app-host service instance bound');
      }
      let body = {
        Type: 'HTTP',
        Name: this._sapCloudService.replace(/\./g,'') + '-appHost',
        Description: 'App-host destination',
        clientSecret: credentials.uaa.clientsecret,
        clientId: credentials.uaa.clientid,
        tokenServiceURL: credentials.uaa.url,
        xsappname: credentials.uaa.xsappname,
        URL: 'https://dummy',
        'sap.cloud.service': this._sapCloudService,
        app_host_id: credentials.app_host_id
      };
      resolve(this._upsertDestinationConfigurations(body));
    });
  }

  _upsertBusinessServicesDestinations(){
    return new Promise((resolve) => {
      log.logMessage('Creating business services destination');
      const bsCredentials = this._getCredentials();
      if (!bsCredentials.length) {
        return resolve('No business service instance bound');
      }
      const destinationPromises = bsCredentials.map(service => {
        const credentials = service.credentials;
        const body = {
          Type: 'HTTP',
          Name: this._sapCloudService.replace(/\./g,'') + `-${credentials['sap.cloud.service']}-${service.name}`,
          Description: `Business service-${service.name} destination`,
          Authentication: 'OAuth2ClientCredentials',
          clientSecret: credentials.uaa.clientsecret,
          clientId: credentials.uaa.clientid,
          tokenServiceURL: credentials.uaa.url,
          xsappname: credentials.uaa.xsappname,
          URL: 'https://dummy',
          'sap.cloud.service': credentials['sap.cloud.service'],
          'html5-apps-repo': JSON.stringify(credentials['html5-apps-repo']),
          endpoints :JSON.stringify(credentials.endpoints),
          grant_type: credentials.grant_type
        };
        if (credentials.saasregistryenabled){
          body.saasregistryenabled = credentials.saasregistryenabled;
        }
        return this._upsertDestinationConfigurations(body);
      });
      resolve(Promise.all(destinationPromises));
    });
  }

  _upsertBackendDestinations(){
    return new Promise((resolve) => {
      log.logMessage('Creating backend destination');
      if (!this._backendDestinations){
        log.logMessage('No backend destinations defined');
        return resolve();
      }
      let destinationPromises = [];
      this._backendDestinations.forEach((destination) => {
        destinationPromises.push(this._upsertDestinationConfigurations(destination));
      });
      resolve(Promise.all(destinationPromises));
    });
  }

  _upsertDestinationConfigurations(body){
    return new Promise((resolve, reject) => {
      let credentials = this._getCredentials('destination');
      let message;
      let options = {
        url: this._subaccountLevelDestination ? credentials.uri + '/destination-configuration/v1/subaccountDestinations' :
          credentials.uri + '/destination-configuration/v1/instanceDestinations',
        headers: {
          Authorization:  'Bearer ' + this._accessToken
        },
        json: true,
        body: body
      };
      request.post(options, (err, res) => {
        if (res && res.statusCode === 409){
          // Destination already exists
          request.put(options, (err, res) => {
            if (err || res.statusCode !== 200) {
              message = 'Failed to update destination configuration with destination name ' + body.Name +
              res && res.body ? res.body.error + ' ' + res.body.description + ' status ' + res.statusCode : err ;
              log.logMessage(message);
              return reject(message);
            } else {
              this._destinationLogs.push({name: body.Name});
              return resolve();
            }
          });
          log.logMessage('Destination ' + body.Name + ' updated succesfully');
          return resolve();
        }
        if (err || (res.statusCode !== 200 && res.statusCode !== 201)) {
          let bodyError = res && res.body ? ' ' + res.body.error + ' ' + res.body.description + ' status ' + res.statusCode + ' ' : '';
          message = 'Failed to create destination configuration with destination name ' + body.Name + bodyError +  err ;
          log.logMessage(message);
          return reject(message);
        } else {
          log.logMessage('Destination ' + body.Name + ' created succesfully');
          this._destinationLogs.push({name: body.Name});
          resolve();
        }
      });
    });
  }

  _getDestinationToken(){
    return new Promise((resolve, reject) => {
      log.logMessage('Obtaining destination token');
      let credentials = this._getCredentials('destination');
      if (!credentials){
        return reject('Failed to obtain destination credentials, check that destination service is bound');
      }
      let requestOptions = {
        url: credentials.url + '/oauth/token/?grant_type=client_credentials',
        headers: {
          'content-type': 'application/x-www-form-urlencoded;charset=utf-8',
          'accept': 'application/json;charset=utf-8'
        },
        auth: {
          user: credentials.clientid,
          pass: credentials.clientsecret
        }
      };

      request.post(requestOptions, function onResponse(err, res, body) {
        if (err || res.statusCode !== 200) {
          return reject(err, 'Request to destination token from xsuaa failed');
        }
        let responseJSON = JSON.parse(body);
        resolve(responseJSON.access_token);
      });
    });
  }

  _getCredentials(tag,label){
    const html5Services = ['html5-apps-repo-rt' , 'html5-apps-repo-dt' , 'html5-apps-repo'];
    let credentials;
    if (!tag && !label){
      credentials = xsenv.filterServices(service => !!service.credentials['sap.cloud.service'] && !html5Services.includes(service.credentials['sap.cloud.service']));
    }
    else {
      try {
        credentials = label ? xsenv.serviceCredentials({label: label}) : xsenv.serviceCredentials({tag: tag});
      } catch (e) {
        return null;
      }
    }
    return credentials;
  }
}
module.exports = DestinationUtils;